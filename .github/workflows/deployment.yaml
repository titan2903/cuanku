name: Deploy to Production Server

on:
    push:
        branches: [main]
    workflow_dispatch:

jobs:
    deploy:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Deploy to Production Server
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.SERVER_HOST }}
                  username: ${{ secrets.SERVER_USERNAME }}
                  key: ${{ secrets.SERVER_SSH_KEY }}
                  port: ${{ secrets.SERVER_PORT }}
                  script: |
                      cd /root/project/cuanku
                      git checkout main
                      git pull origin main

                      # Stop existing containers (if any)
                      docker compose down

                      # Build Docker images
                      docker compose build

                      # Build assets with Node.js (production)
                      echo "Building frontend assets..."
                      docker compose --profile build up node-build

                      # Remove node-build container after completion
                      docker compose rm -f node-build

                      # Start the application
                      echo "Starting Laravel application..."
                      docker compose up -d app

                      # Wait for container to be healthy
                      echo "Waiting for application to be ready..."
                      timeout=60
                      while [ $timeout -gt 0 ]; do
                          if docker compose exec -T app curl -f http://localhost/ >/dev/null 2>&1; then
                              echo "Application is ready!"
                              break
                          fi
                          echo "Waiting... ($timeout seconds remaining)"
                          sleep 5
                          timeout=$((timeout-5))
                      done

                      if [ $timeout -eq 0 ]; then
                          echo "Application failed to start within timeout"
                          exit 1
                      fi

                      # Create database if not exists
                      echo "🔄 Creating database if not exists..."
                      docker exec mysql mysql -u root -pfah6w2yfG2JL7Jk -e "CREATE DATABASE IF NOT EXISTS cuanku CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;" || echo "Database creation skipped"

                      # Debug network connectivity
                      echo "🔍 Testing network connectivity..."
                      docker compose exec -T app ping -c 2 mysql || echo "❌ Cannot reach mysql container"
                      docker compose exec -T app nslookup mysql || echo "❌ Cannot resolve mysql hostname"

                      # Test database connection
                      echo "🔄 Testing database connection..."
                      if docker compose exec -T app php artisan tinker --execute="
                      try {
                          DB::connection()->getPdo();
                          echo 'Database connected successfully!';
                      } catch (Exception \$e) {
                          echo 'Database connection failed: ' . \$e->getMessage();
                          exit(1);
                      }
                      " 2>/dev/null; then
                          echo "✅ Database connection successful"
                      else
                          echo "❌ Database connection failed"
                          echo "Checking container logs..."
                          docker compose logs --tail=20 app
                          echo "Checking MySQL container..."
                          docker logs --tail=20 mysql
                          exit 1
                      fi

                      # Run Laravel-specific commands including MIGRATION
                      echo "Running Laravel migrations and optimizations..."
                      
                      # Run database migrations
                      echo "🔄 Running database migrations..."
                      if docker compose exec -T app php artisan migrate --force; then
                          echo "✅ Database migrations completed successfully"
                      else
                          echo "❌ Database migrations failed"
                          docker compose logs --tail=50 app
                          exit 1
                      fi
                      
                      # Run Laravel optimizations
                      echo "🔄 Running Laravel optimizations..."
                      docker compose exec -T app php artisan config:cache
                      docker compose exec -T app php artisan route:cache
                      docker compose exec -T app php artisan view:cache
                      docker compose exec -T app php artisan optimize
                      echo "✅ Laravel optimizations completed"
                      
                      # Create admin user if not exists
                      echo "🔄 Checking admin user..."
                      docker compose exec -T app php artisan tinker --execute="
                      \$admin = \App\Models\User::where('name', 'admin')->first();
                      if (!\$admin) {
                          \App\Models\User::create([
                              'name' => 'admin',
                              'email' => 'admin@cuanku.local',
                              'password' => bcrypt('admin123'),
                              'is_active' => true,
                              'role' => 'admin',
                          ]);
                          echo 'Admin user created with email: admin@cuanku.local and password: admin123';
                      } else {
                          echo 'Admin user already exists';
                      }
                      " 2>/dev/null || echo "Admin user creation skipped"

                      # Clean up unused Docker resources
                      docker system prune -f

                      # Verify deployment
                      echo "Verifying deployment..."
                      if docker compose exec -T app php artisan --version >/dev/null 2>&1; then
                          echo "✅ Laravel is running successfully"
                      else
                          echo "❌ Laravel verification failed"
                          exit 1
                      fi

                      # Output deployment status
                      echo "🎉 Deployment completed successfully"
                      docker system prune -f
                      docker compose ps

                      # Show application logs (last 20 lines)
                      echo "📋 Recent application logs:"
                      docker compose logs --tail=20 app
