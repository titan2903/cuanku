name: Deploy to Production Server

on:
    push:
        branches: [main]
    workflow_dispatch:

jobs:
    deploy:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Deploy to Production Server
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.SERVER_HOST }}
                  username: ${{ secrets.SERVER_USERNAME }}
                  key: ${{ secrets.SERVER_SSH_KEY }}
                  port: ${{ secrets.SERVER_PORT }}
                  script: |
                      cd /root/project/cuanku
                      git checkout main
                      git pull origin main

                      # Check system resources before build
                      echo "🔍 Checking system resources..."
                      echo "📊 Disk space:"
                      df -h /
                      echo "📊 Memory usage:"
                      free -h
                      echo "📊 Docker daemon status:"
                      sudo systemctl is-active docker

                      # Check if we have enough space (at least 2GB free)
                      available_space=$(df / | tail -1 | awk '{print $4}')
                      if [ $available_space -lt 2097152 ]; then # 2GB in KB
                          echo "⚠️ Low disk space detected. Cleaning up..."
                          docker system prune -af
                          docker volume prune -f
                      fi

                      # Stop existing containers (if any)
                      echo "🛑 Stopping existing containers..."
                      if docker compose ps -q | grep -q .; then
                          echo "Found running containers, stopping them..."
                          docker compose down
                          echo "✅ Containers stopped successfully"
                      else
                          echo "No running containers found"
                      fi

                      # Check existing images and build strategy
                      echo "🔍 Checking existing Docker images..."
                      existing_app_image=$(docker images -q cuanku-app-prod:latest 2>/dev/null)
                      existing_node_image=$(docker images -q cuanku-node-build:latest 2>/dev/null)
                      
                      if [ -n "$existing_app_image" ]; then
                          echo "📦 Found existing app image: $existing_app_image"
                          echo "📊 Image created: $(docker inspect --format='{{.Created}}' $existing_app_image)"
                          echo "🔄 Will rebuild to get latest code changes"
                      else
                          echo "📦 No existing app image found, will create new one"
                      fi

                      # Clean up Docker resources before build
                      echo "🧹 Cleaning up Docker resources..."
                      # Only clean dangling images to preserve cache
                      docker image prune -f
                      docker container prune -f
                      
                      # If low disk space, do more aggressive cleanup but keep recent images
                      available_space=$(df / | tail -1 | awk '{print $4}')
                      if [ $available_space -lt 2097152 ]; then # 2GB in KB
                          echo "⚠️ Low disk space detected. More aggressive cleanup..."
                          docker system prune -f --volumes
                          docker image prune -a -f --filter "until=24h"
                      fi

                      # Build Docker images with force rebuild for latest code
                      echo "🔨 Building Docker images (force rebuild for latest code)..."
                      export DOCKER_BUILDKIT=1
                      export COMPOSE_DOCKER_CLI_BUILD=1
                      export BUILDKIT_PROGRESS=plain
                      
                      build_retry=0
                      max_retries=2

                      while [ $build_retry -lt $max_retries ]; do
                          echo "Build attempt $((build_retry + 1))/$max_retries"
                          
                          # Always rebuild to get latest code changes
                          if [ $build_retry -eq 0 ]; then
                              echo "� First attempt: Building with fresh layers (no cache for code changes)..."
                              build_cmd="docker compose build --no-cache --pull --parallel"
                          else
                              echo "🔄 Retry attempt: Building without cache and removing old images..."
                              build_cmd="docker compose build --no-cache --force-rm --pull --parallel"
                          fi
                          
                          # Execute build with timeout (20 minutes untuk handle package discovery)
                          echo "⏰ Starting build with 20-minute timeout..."
                          if timeout 1200 $build_cmd; then
                              echo "✅ Docker build completed successfully"
                              echo "📦 New image built with latest code changes"
                              break
                          else
                              build_exit_code=$?
                              build_retry=$((build_retry + 1))
                              
                              if [ $build_exit_code -eq 124 ]; then
                                  echo "⏰ Build timed out after 20 minutes"
                              else
                                  echo "❌ Build failed with exit code $build_exit_code"
                              fi
                              
                              if [ $build_retry -lt $max_retries ]; then
                                  echo "⚠️ Build failed, cleaning up and retrying in 30 seconds..."
                                  docker compose down || true
                                  # More aggressive cleanup on retry
                                  docker system prune -f
                                  docker builder prune -f || true
                                  sleep 30
                              else
                                  echo "❌ Docker build failed after $max_retries attempts"
                                  echo "📋 Checking Docker daemon status..."
                                  sudo systemctl status docker --no-pager -l
                                  echo "📋 Docker system info:"
                                  docker system df
                                  echo "📋 Available disk space:"
                                  df -h /var/lib/docker 2>/dev/null || df -h /
                                  
                                  # Try to use existing image if available as fallback
                                  if [ -n "$existing_app_image" ]; then
                                      echo "🔄 Attempting to use existing image as fallback..."
                                      echo "⚠️ Using existing image - deployment will have previous code version"
                                      break
                                  else
                                      exit 1
                                  fi
                              fi
                          fi
                      done

                      # Build assets with Node.js (production) with retry
                      echo "Building frontend assets..."
                      asset_retry=0
                      max_asset_retries=2

                      while [ $asset_retry -lt $max_asset_retries ]; do
                          echo "Asset build attempt $((asset_retry + 1))/$max_asset_retries"
                          
                          if docker compose --profile build up node-build; then
                              echo "✅ Frontend assets build completed successfully"
                              break
                          else
                              asset_retry=$((asset_retry + 1))
                              if [ $asset_retry -lt $max_asset_retries ]; then
                                  echo "⚠️ Asset build failed, retrying..."
                                  sleep 15
                                  docker compose rm -f node-build
                              else
                                  echo "❌ Asset build failed after $max_asset_retries attempts"
                                  echo "📋 Node build container logs:"
                                  docker compose logs node-build
                                  # Continue anyway - assets might exist from previous build
                                  echo "⚠️ Continuing deployment without fresh assets..."
                              fi
                          fi
                      done

                      # Remove node-build container after completion
                      docker compose rm -f node-build

                      # Start the application with latest build
                      echo "🚀 Starting Laravel application with latest build..."
                      
                      # Remove old containers and start fresh with new image
                      docker compose down app 2>/dev/null || true
                      
                      if docker compose up -d app; then
                          echo "✅ Container started successfully with latest build"
                      else
                          echo "❌ Failed to start container with new build"
                          echo "📋 Container logs:"
                          docker compose logs app
                          echo "📋 Docker system info:"
                          docker system df
                          
                          # Try to start with existing image if new one failed
                          if [ -n "$existing_app_image" ]; then
                              echo "🔄 Attempting to start with previous working image..."
                              if docker compose up -d app; then
                                  echo "✅ Started with previous working image"
                              else
                                  exit 1
                              fi
                          else
                              exit 1
                          fi
                      fi

                      # Wait for container to be healthy with extended timeout
                      echo "Waiting for application to be ready..."
                      timeout=120  # Extended timeout to 2 minutes
                      health_check_interval=10
                      
                      while [ $timeout -gt 0 ]; do
                          # Check if container is running first
                          if ! docker compose ps app | grep -q "Up"; then
                              echo "❌ Container is not running"
                              docker compose logs --tail=50 app
                              exit 1
                          fi
                          
                          # Check if application responds
                          if docker compose exec -T app curl -f http://localhost/ >/dev/null 2>&1; then
                              echo "✅ Application is ready!"
                              break
                          fi
                          
                          echo "Waiting... ($timeout seconds remaining)"
                          sleep $health_check_interval
                          timeout=$((timeout-health_check_interval))
                      done

                      if [ $timeout -eq 0 ]; then
                          echo "❌ Application failed to start within timeout"
                          echo "📋 Container status:"
                          docker compose ps
                          echo "📋 Application logs:"
                          docker compose logs --tail=100 app
                          echo "📋 System resources:"
                          free -h
                          df -h
                          exit 1
                      fi

                      # Create database if not exists (using external connection)
                      echo "🔄 Creating database if not exists..."
                      docker exec mysql mysql -u root -pfah6w2yfG2JL7Jk -e "CREATE DATABASE IF NOT EXISTS cuanku CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;" || echo "Database creation skipped"

                      # Test external database connectivity
                      echo "🔍 Testing external database connectivity..."
                      docker compose exec -T app php -r "echo (gethostbyname('176.100.37.75') !== '176.100.37.75') ? 'DNS resolved' : 'Using direct IP';" || echo "Network test skipped"

                      # Test database connection
                      echo "🔄 Testing database connection..."
                      if docker compose exec -T app php artisan tinker --execute="
                      try {
                          DB::connection()->getPdo();
                          echo 'Database connected successfully!';
                      } catch (Exception \$e) {
                          echo 'Database connection failed: ' . \$e->getMessage();
                          exit(1);
                      }
                      " 2>/dev/null; then
                          echo "✅ Database connection successful"
                      else
                          echo "❌ Database connection failed"
                          echo "Checking container logs..."
                          docker compose logs --tail=20 app
                          echo "Testing direct database connection..."
                          docker compose exec -T app php -r "
                          try {
                              \$pdo = new PDO('mysql:host=176.100.37.75;port=3307', 'root', 'fah6w2yfG2JL7Jk');
                              echo 'Direct connection successful';
                          } catch (Exception \$e) {
                              echo 'Direct connection failed: ' . \$e->getMessage();
                          }
                          " || echo "Direct connection test failed"
                          exit 1
                      fi

                      # Run Laravel-specific commands including MIGRATION
                      echo "Running Laravel migrations and optimizations..."
                      
                      # Clear all caches first to ensure fresh config
                      echo "🔄 Clearing Laravel caches..."
                      docker compose exec -T app php artisan config:clear || echo "Config clear skipped"
                      docker compose exec -T app php artisan cache:clear || echo "Cache clear skipped" 
                      docker compose exec -T app php artisan route:clear || echo "Route clear skipped"
                      docker compose exec -T app php artisan view:clear || echo "View clear skipped"
                      echo "✅ Caches cleared"
                      
                      # Run package discovery untuk ensure semua packages ter-discover
                      echo "🔄 Running package discovery..."
                      docker compose exec -T app php artisan package:discover --ansi || echo "Package discovery completed"
                      
                      # Run database migrations with error handling
                      echo "🔄 Running database migrations..."
                      if docker compose exec -T app php artisan migrate --force; then
                          echo "✅ Database migrations completed successfully"
                      else
                          echo "❌ Database migrations failed"
                          echo "📋 Checking migration status..."
                          docker compose exec -T app php artisan migrate:status || echo "Migration status check failed"
                          echo "📋 Application logs:"
                          docker compose logs --tail=50 app
                          echo "📋 Checking database connection again..."
                          docker compose exec -T app php artisan tinker --execute="
                          try {
                              DB::connection()->getPdo();
                              echo 'Database still connected';
                          } catch (Exception \$e) {
                              echo 'Database connection lost: ' . \$e->getMessage();
                          }
                          " || echo "Database recheck failed"
                          exit 1
                      fi
                      
                      # Run Laravel optimizations
                      echo "🔄 Running Laravel optimizations..."
                      docker compose exec -T app php artisan config:cache
                      docker compose exec -T app php artisan route:cache
                      docker compose exec -T app php artisan view:cache
                      docker compose exec -T app php artisan optimize
                      echo "✅ Laravel optimizations completed"
                      
                      # Create admin user if not exists
                      echo "🔄 Checking admin user..."
                      docker compose exec -T app php artisan tinker --execute="
                      \$admin = \App\Models\User::where('name', 'admin')->first();
                      if (!\$admin) {
                          \App\Models\User::create([
                              'name' => 'admin',
                              'email' => 'admin@cuanku.local',
                              'password' => bcrypt('admin123'),
                              'is_active' => true,
                              'role' => 'admin',
                          ]);
                          echo 'Admin user created with email: admin@cuanku.local and password: admin123';
                      } else {
                          echo 'Admin user already exists';
                      }
                      " 2>/dev/null || echo "Admin user creation skipped"

                      # Clean up unused Docker resources
                      docker system prune -f

                      # Verify deployment
                      echo "Verifying deployment..."
                      if docker compose exec -T app php artisan --version >/dev/null 2>&1; then
                          echo "✅ Laravel is running successfully"
                      else
                          echo "❌ Laravel verification failed"
                          exit 1
                      fi

                      # Output deployment status
                      echo "🎉 Deployment completed successfully"
                      echo "📋 Final status check:"
                      echo "Container status:"
                      docker compose ps
                      echo "📋 Image information:"
                      docker images | grep cuanku || echo "No cuanku images found"
                      echo "📋 System resources after deployment:"
                      free -h
                      df -h /
                      
                      # Clean up dangling images only (keep current ones)
                      echo "🧹 Cleaning up dangling images..."
                      docker image prune -f
                      
                      # Final cleanup of unused resources
                      docker system prune -f

                      # Show application logs (last 20 lines)
                      echo "📋 Recent application logs:"
                      docker compose logs --tail=20 app
